{"columns": ["params"], "data": [["{'experiment_name': 'weight_prediction_5k', 'batch_size': 32, 'epochs': 5, 'learning_rate': 0.001, 'weight_decay': 0.0, 'task': 'regression', 'print_every_n': 200, 'validate_every_n': 200}"], ["{'gnn_conv': <class 'torch_geometric.nn.conv.gcn_conv.GCNConv'>, 'in_features': 3, 'encoder_channels': [16], 'conv_channels': [32, 64, 128], 'decoder_channels': [32], 'num_classes': 1, 'apply_dropedge': True, 'apply_bn': True, 'apply_dropout': True}"], ["MeshProcessingNetwork(\n  (input_encoder): Sequential(\n    (0): Linear(in_features=3, out_features=16, bias=True)\n    (1): ReLU()\n  )\n  (gnn): GraphFeatureEncoder(\n    (conv_layers): ModuleList(\n      (0): GCNConv(16, 32)\n      (1): GCNConv(32, 64)\n      (2): GCNConv(64, 128)\n    )\n    (bn_layers): ModuleList(\n      (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    )\n  )\n  (final_projection): Sequential(\n    (0): Linear(in_features=128, out_features=32, bias=True)\n    (1): ReLU()\n    (2): Dropout(p=0.5, inplace=False)\n    (3): Linear(in_features=32, out_features=1, bias=True)\n    (4): Identity()\n  )\n)"]]}